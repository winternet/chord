version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: winternet1337/chord
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    docker:
      - image: ubuntu:20.04
    environment:
      VERSION_GRPC: v1.27.3
      VERSION_PROTOBUF: v3.11.4
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            apt-get update
            apt-get -y install build-essential \
                       curl \
                       git \
                       cmake \
                       autoconf \
                       libtool \
                       libboost-system-dev \
                       libboost-serialization-dev \
                       libleveldb-dev \
                       libyaml-cpp-dev \
                       libboost-thread-dev \
                       libboost-program-options-dev \
                       libssl-dev

      - run:
          name: Install grpc
          command: |
            cd $DEPS
            git clone -b $VERSION_GRPC https://github.com/grpc/grpc
            cd grpc
            git submodule update --init
            make -j4 CFLAGS='-Wno-error -Wno-expansion-to-defined' && make install CFLAGS='-Wno-error -Wno-expansion-to-defined'
            ldconfig
      
      - run:
          name: Install protobuf
          command: |
            cd $DEPS
            git clone -b $VERSION_PROTOBUF https://github.com/google/protobuf.git protobuf
            cd protobuf
            ./autogen.sh
            ./configure
            make -j4 && make install
            ldconfig
            protoc --version

      - run:
          name: Install chord
          command: |
            mkdir build
            cd build
            CXX=g++-9 CC=gcc-9 cmake .. -DENABLE_COVERAGE:BOOL=TRUE -DCMAKE_BUILD_TYPE:STRING=Release -Dchord_BUILD_TESTS:BOOL=ON -Dchord_USE_CCACHE:BOOL=FALSE
            cmake --build . -- -j1
      - run:
          name: Run tests
          command: |
            cd build
            ctest --verbose
            bash <(curl -s https://codecov.io/bash) -t 8811a299-c05a-4c37-8d1d-c5bac9cca1fe
      - store_test_results:
          path: build/gtest-out
      - store_artifacts:
          path: build/gtest-out


  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build docker image
          command: |
            docker build -t $IMAGE_NAME:latest -f docker/Dockerfile_scratch .
      - run:
          name: Archive docker image
          command: |
            docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  docker-publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish docker image to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            IMAGE_TAG="build-${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  docker-publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish docker image to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  version: 2
  build-master:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - docker-build:
          context: docker-context
          requires:
            - build
          filters:
            branches:
              only: master
      - docker-publish-latest:
          context: docker-context
          requires:
            - build
            - docker-build
          filters:
            branches:
              only: master
      - docker-publish-tag:
          context: docker-context
          requires:
            - build
            - docker-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
