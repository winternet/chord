version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: winternet1337/chord
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    machine:
      image: ubuntu-2204:current
      #docker:
      #  - image: ubuntu:20.04
    environment:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - run:
          name: "Setup"
          command: |
            sudo apt-get update
            sudo apt-get -y install build-essential \
                       curl \
                       git \
                       cmake \
                       ninja-build \
                       autoconf \
                       fuse3 \
                       pkg-config \
                       python3 \
                       python3-pip \
                       rpm
            pip3 install conan

      - restore_cache:
          keys:
            - conan-cache-v2--{{ checksum "conanfile.txt" }}
            - conan-cache-v2
      - run:
          name: "Install chord"
          command: |
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu/libfswatch"
            # mkdir build && cd build
            # conan config set general.revisions_enabled=True
            # conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan || true
            # conan config set general.revisions_enabled=1
            # conan profile update settings.compiler.libcxx=libstdc++11 default
            conan profile detect -f
            conan install . --build=missing --output-folder=build
            cd build
            CXX=g++-9 CC=gcc-9 cmake .. \
              -G Ninja \
              -DENABLE_COVERAGE:BOOL=TRUE \
              -Dchord_USE_CCACHE:BOOL=FALSE \
              -DCMAKE_BUILD_TYPE:STRING=Release \
              -Dchord_BUILD_TESTS:BOOL=ON \
              -Dchord_BUILD_INTEGRATION_TESTS:BOOL=ON \
              -Dchord_BUILD_FUSE_ADAPTER:BOOL=ON
            cmake --build . -j1

      - save_cache:
          paths:
            - ~/.conan
          key: conan-cache-v2--{{ checksum "conanfile.txt" }}

      - run:
          name: "Run tests"
          command: |
            cd build
            ctest --verbose #-E chord_test_fuse # docker container would require more privileges
            bash <(curl -s https://codecov.io/bash) -t 8811a299-c05a-4c37-8d1d-c5bac9cca1fe
      - store_test_results:
          path: build/gtest-out
      - store_artifacts:
          path: build/gtest-out

      - run:
          name: "Build artifacts"
          command: |
            cd build
            cmake -G Ninja -DCPACK_PACKAGING_INSTALL_PREFIX=/ -DCMAKE_BUILD_TYPE=Release ..
            cpack -G DEB
            dpkg-deb -c ../packages/chord*.deb
            cpack -G RPM
            rpm -qlp ../packages/chord*.rpm
            cmake -DCMAKE_BUILD_TYPE=Release ..
            cpack -G TGZ
            tar -tf ../packages/chord*gz

      - store_artifacts:
          path: ./packages

      - persist_to_workspace:
          root: .
          paths:
            - packages

  publish-artifacts:
    docker:
      - image: cimg/go:1.17.6
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Publish Release on GitHub"
          command: |
            go install github.com/tcnksm/ghr@v0.14.0
            VERSION="main-snapshot"
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -prerelease ${VERSION} /tmp/workspace/packages 



  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build docker image"
          command: |
            docker build -t $IMAGE_NAME:latest -f docker/Dockerfile_scratch .
      - run:
          name: "Archive docker image"
          command: |
            docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  docker-publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: "Load archived docker image"
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: "Publish docker image to docker hub"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            IMAGE_TAG="build-${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  docker-publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: "Load archived docker image"
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: "Publish docker image to docker hub"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  version: 2
  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 0" # weekly build on SUN
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - docker-build

  build-main:
    jobs:
      - build:
          filters:
            branches:
              only: 
                - main
                - feature/fuse
      - publish-artifacts:
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - docker-build:
          context: docker-context
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - feature/fuse
      - docker-publish-latest:
          context: docker-context
          requires:
            - docker-build
          filters:
            branches:
              only:
                - main
                - feature/fuse
      - docker-publish-tag:
          context: docker-context
          requires:
            - build
            - docker-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
