version: 2.1
commands:
  setup-centos:
    description: "Setup CentOS"
    steps:
      - run:
          command: |
            sudo dnf -y install curl \
                       git \
                       cmake \
                       rpm-build \
                       fuse3 \
                       python3 \
                       gcc-c++
            pip3 install conan

  setup-ubuntu:
    description: "Setup Ubuntu"
    steps:
      - run:
          command: |
            sudo apt-get update
            sudo apt-get -y install build-essential \
                       curl \
                       git \
                       cmake \
                       autoconf \
                       fuse3 \
                       tree \
                       libfuse3-dev \
                       pkg-config \
                       python3 \
                       python3-pip
            pip3 install conan

  prepare-project:
    description: "Prepare project for build"
    steps:
      - run:
          command: |
            mkdir build && cd build
            conan config set general.revisions_enabled=True
            conan remote add winternet-conan-virt https://winternet.jfrog.io/artifactory/api/conan/conan-virt || true
            conan install .. --build=missing -s compiler.libcxx=libstdc++11 

  build-project-release:
    description: "Build the project (release)"
    parameters:
      fuse-api-version:
        default: "35"
        type: string
    steps:
      - run:
          command: |
            cd build
            cmake .. \
              -DENABLE_COVERAGE:BOOL=FALSE \
              -DCMAKE_BUILD_TYPE:STRING=Release \
              -Dchord_BUILD_TESTS:BOOL=OFF \
              -Dchord_BUILD_INTEGRATION_TESTS:BOOL=OFF \
              -Dchord_BUILD_FUSE_ADAPTER:BOOL=ON \
              -Dchord_FUSE_VERSION=<<parameters.fuse-api-version>>
            cmake --build . -- -j1

  build-project-tests:
    description: "Build the project (with tests)"
    steps:
      - run:
          command: |
            cd build
            cmake .. \
              -DENABLE_COVERAGE:BOOL=TRUE \
              -Dchord_USE_CCACHE:BOOL=FALSE \
              -DCMAKE_BUILD_TYPE:STRING=Release \
              -Dchord_BUILD_TESTS:BOOL=ON \
              -Dchord_BUILD_INTEGRATION_TESTS:BOOL=ON \
              -Dchord_BUILD_FUSE_ADAPTER:BOOL=ON
            cmake --build . -- -j1


executors:
  docker-publisher:
    environment:
      IMAGE_NAME: winternet1337/chord
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  package-deb:
    docker:
      - image: ubuntu-2004:202101-01
    steps:
      - checkout
      - setup-ubuntu
      - prepare-project
      - build-project-release
  package-rpm:
    docker:
      - image: dokken/centos-stream-8
    steps:
      - checkout
      - setup-centos
      - prepare-project
      - build-project-release:
          fuse-api-version: "30"

  build:
    machine:
      image: ubuntu-2004:202101-01
      #docker:
      #  - image: ubuntu:20.04
    environment:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - setup-ubuntu
      - restore_cache:
          keys:
            - conan-cache-v2--{{ checksum "conanfile.txt" }}
            - conan-cache-v2
      - prepare-project
      - save_cache:
          paths:
            - ~/.conan
          key: conan-cache-v2--{{ checksum "conanfile.txt" }}
      - build-project-tests

      - run:
          name: Run tests
          command: |
            ctest --verbose #-E chord_test_fuse # docker container would require more privileges
            bash <(curl -s https://codecov.io/bash) -t 8811a299-c05a-4c37-8d1d-c5bac9cca1fe
      - store_test_results:
          path: build/gtest-out
      - store_artifacts:
          path: build/gtest-out

  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build docker image
          command: |
            docker build -t $IMAGE_NAME:latest -f docker/Dockerfile_scratch .
      - run:
          name: Archive docker image
          command: |
            docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  docker-publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish docker image to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            IMAGE_TAG="build-${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

  docker-publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish docker image to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  version: 2
  build-main:
    jobs:
      - build:
          filters:
            branches:
              only: 
                - main
                - feature/fuse
                - feature/packages
      - package-deb:
          requires:
            - build
      - package-rpm:
          requires:
            - build
      - docker-build:
          context: docker-context
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - feature/fuse
      - docker-publish-latest:
          context: docker-context
          requires:
            - docker-build
          filters:
            branches:
              only:
                - main
                - feature/fuse
      - docker-publish-tag:
          context: docker-context
          requires:
            - build
            - docker-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
