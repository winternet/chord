version: 2
jobs:
  build:
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            apt-get update
            apt-get -y install build-essential autoconf libtool git curl cmake unzip software-properties-common wget
            wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
            add-apt-repository -y ppa:ubuntu-toolchain-r/test
            add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main"
            apt-get update
            export WORKINGDIR="$(pwd)"
            echo "working dir: $WORKINGDIR"
            export DEPS="$(pwd)/deps"
            echo "dependency dir: $DEPS"
            mkdir -p $DEPS

      - run:
          name: Install clang
          command: |
            apt-get -y install clang-8.0 
            clang++-8.0 --version

      - run:
          name: Install gcc-8
          command: |
            apt-get -y install  gcc-8 g++-8
            g++ --version

      - run:
          name: Install cmake
          command: |
            cd $DEPS
            wget https://cmake.org/files/v3.14/cmake-3.14.3.tar.gz
            tar xvzf cmake-3.14.3.tar.gz
            cd cmake-3.14.3
            ./bootstrap
            make -j4 && make install
            cmake --version

      - run:
          name: Install leveldb
          command: |
            apt-get -y install libleveldb-dev

      - run:
          name: Install yaml-cpp
          command: |
            apt-get -y install libyaml-cpp-dev

      - run:
          name: Install xattr
          command: |
            apt-get -y install attr-dev

      - run:
          name: Install openssl
          command: |
            apt-get -y install openssl libssl-dev

      - run:
          name: Install boost
          command: |
            cd $DEPS
            git clone -b boost-1.65.0 --depth 1 --recursive http://github.com/boostorg/boost.git boost || exit 1
            (cd boost && ./bootstrap.sh --prefix=/usr --with-libraries=log,thread,system,program_options,serialization && ./b2 headers && ./b2 link=shared install) || exit 1
            ldconfig

      - run:
          name: Install grpc
          command: |
            cd $DEPS
            git clone -b v1.15.1 https://github.com/grpc/grpc
            cd grpc
            git submodule update --init
            make -j4 CFLAGS='-Wno-error -Wno-expansion-to-defined' && make install CFLAGS='-Wno-error -Wno-expansion-to-defined'
            ldconfig

      - run:
          name: Install protobuf
          command: |
            cd $DEPS
            git clone -b v3.6.1 https://github.com/google/protobuf.git protobuf
            cd protobuf
            ./autogen.sh
            ./configure
            make -j4 && make install
            ldconfig
            protoc --version

      - run:
          name: Install chord
          command: |
            mkdir build
            cd build
            CXX=g++-7 CC=gcc-7 cmake .. -DENABLE_COVERAGE:BOOL=TRUE -DCMAKE_BUILD_TYPE:STRING=Release
            cmake --build . -- -j4 
            ctest --verbose
            bash <(curl -s https://codecov.io/bash) -t 8811a299-c05a-4c37-8d1d-c5bac9cca1fe

