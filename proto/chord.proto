syntax = "proto3";

import "chord_common.proto";


option java_multiple_files = true;
option java_package = "onezero.chord";
option java_outer_classname = "ChordProto";
option objc_class_prefix = "CRD";

package chord;

service Chord {

  //--- common chord calls
  rpc lookup    (LookupRequest)     returns (LookupResponse) {}
  rpc stabilize (StabilizeRequest)  returns (StabilizeResponse) {}
  rpc notify    (NotifyRequest)     returns (NotifyResponse) {}
  rpc check     (CheckRequest)      returns (CheckResponse) {}
  rpc leave     (LeaveRequest)      returns (LeaveResponse) {}
  rpc state     (StateRequest)      returns (StateResponse) {}
  rpc ping      (PingRequest)       returns (PingResponse) {}
}

/**
 * SUCCESSOR 
 */
message LookupRequest {
  chord.common.Header header = 1;
  //--- id to find
  string id = 2;
}

message LookupResponse { 
  chord.common.Header header = 1;
  chord.common.RouterEntry successor = 2;
}

/**
 * STABILIZE
 */
message StabilizeRequest {
  chord.common.Header header = 1;
}
message StabilizeResponse {
  chord.common.Header header = 1;
  chord.common.RouterEntry predecessor = 2;
}

/**
 * NOTIFY
 */
message NotifyRequest {
  chord.common.Header header = 1;
  /**
   * in case a node joined (A), A will inform its successor (B)
   * of its existence and B will propagate the diff to its 
   * successor C so that C can update its finger table:
   *  (C.uuid + pow(2,i)).is_between(old_node, new_node)
   *      => successors[i] = new_node
   */
  chord.common.RouterEntry old_node = 2;
  chord.common.RouterEntry new_node = 3;
}
message NotifyResponse {
  chord.common.Header header = 1;
}

/**
 * CHECK
 */
message CheckRequest {
  chord.common.Header header = 1;
  string id = 2;
}
message CheckResponse {
  chord.common.Header header = 1;
  string id = 2;
}

/**
 * LEAVE
 */
message LeaveRequest {
  chord.common.Header header = 1;
  /**
   * either predecessor xor successor is filled depending
   * on which node is informed
   */
  chord.common.RouterEntry predecessor = 2;
  chord.common.RouterEntry successor = 3;
}

message LeaveResponse { 
  chord.common.Header header = 1;
}

/**
 * STATE
 */
message StateRequest {
  chord.common.Header header = 1;
  bool predecessor = 2;
  bool finger = 4;
}

message StateResponse { 
  chord.common.Header header = 1;
  chord.common.RouterEntry predecessor = 2;
  repeated chord.common.RouterEntry finger = 3;
}

/**
 * PING
 */
message PingRequest {
  chord.common.Header header = 1;
}

message PingResponse { 
  chord.common.Header header = 1;
}

