syntax = "proto3";

import "chord_common.proto";

option java_multiple_files = true;
option java_package = "onezero.chord";
option java_outer_classname = "ChordFSProto";
option objc_class_prefix = "CFS";

package chord.fs;

service Filesystem {
  //--- file 
  rpc put       (stream PutRequest) returns (PutResponse) {}
  rpc get       (GetRequest)        returns (stream GetResponse) {}
  rpc del       (DelRequest)        returns (DelResponse) {}
  rpc meta      (MetaRequest)       returns (MetaResponse) {}
}

/**
 * PUT
 */
message PutRequest {
  //--- id to put
  bytes   data = 1;
  uint64  offset = 2;
  uint64  size = 3;
  string  uri = 4;
}

message PutResponse { 
  //--- id that was put
  string id = 2;
}

/**
 * GET
 */
message GetRequest {
  //--- id to get
  string id = 1;
  string uri = 2;

}

message GetResponse { 
  string  id = 1;
  bytes   data = 2;
  uint64  offset = 3;
  uint64  size = 4;
  string  uri = 5;
}

enum Action {
  ADD = 0;
  DEL = 1;
  DIR = 2;
  MOV = 3;
}

message Data {
  uint32 type = 1;
  uint64 size = 2;
  uint32 permissions = 3;
  string filename = 4;
  string owner = 5;
  string group = 6;

  uint32  replication_idx = 7;
  uint32  replication_cnt = 8;

  string  file_hash = 9;
  chord.common.RouterEntry node_ref = 10;
}

/**
 * DEL
 */
message DelRequest {
  //--- id to del
  string id = 1;
  string uri = 2;

  bool recursive = 3;
}
message DelResponse { }

/**
 * NOTIFY
 */
message MetaRequest {
  string id = 1;
  string uri = 2;
  Action action = 3;

  string uri_dst = 5; // Action::MOV
  repeated Data metadata = 4;
}

message MetaResponse { 
  string uri = 1;

  // set if other node has data (shallow take, just metadata)
  chord.common.RouterEntry node_ref = 8;

  repeated Data metadata = 2;
}

